package utils

import (
	"archive/zip"
	"fmt"
	"io"
	"io/ioutil"
	"math/rand"
	"os"
	"os/user"
	"path/filepath"
	"strings"
	"time"
)

func CreateTmpFolder(path string) {
	if _, err := os.Stat(path); os.IsNotExist(err) {
		os.Mkdir(path, 0777)
	}
}

func FileCopy(src, dst string) (int64, error) {
	sourceFileStat, err := os.Stat(src)
	if err != nil {
		// fmt.Println(err)
		return 0, err
	}

	if !sourceFileStat.Mode().IsRegular() {
		return 0, fmt.Errorf("%s is not a regular file", src)
	}

	source, err := os.Open(src)
	if err != nil {
		// fmt.Println(err)
		return 0, err
	}
	defer source.Close()

	destination, err := os.Create(dst)
	if err != nil {
		// fmt.Println(err)
		return 0, err
	}
	defer destination.Close()
	nBytes, err := io.Copy(destination, source)
	// fmt.Println(err)
	return nBytes, err
}

func ListDirRecursively(root string) {
	var files []string

	err := filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
		files = append(files, path)
		return nil
	})
	if err != nil {
		panic(err)
	}
	fmt.Println("len: ", len(files))
	for _, file := range files {
		fmt.Println(file)
	}
}

func GetFileNameFromPath(path string) string {
	s := strings.Split(path, "/")
	return s[len(s)-1]
}

func GetCurrentUser() (*user.User, error) {
	usr, err := user.Current()
	if err != nil {
		return nil, err
	}
	return usr, err
}

func ZipFiles(files_to_zip []string, out_file_path string) {
	// Get a Buffer to Write To
	outFile, err := os.Create(out_file_path)
	if err != nil {
		fmt.Println(err)
	}
	defer outFile.Close()

	// Create a new zip archive.
	w := zip.NewWriter(outFile)
	defer w.Close()

	for _, file_path := range files_to_zip {
		// read file data
		fmt.Println(file_path)
		data, err := ioutil.ReadFile(file_path)
		if err != nil {
			continue
		}

		// Add some files to the archive.
		filename := GetFileNameFromPath(file_path)
		fmt.Println(filename)
		f, err := w.Create(filename)
		if err != nil {
			continue
		}
		_, err = f.Write(data)
		if err != nil {
			continue
		}
	}

}

func GenerateRandomString(n int) string {
	rand.Seed(time.Now().UnixNano())

	var letterRunes = []rune("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")

	b := make([]rune, n)
	for i := range b {
		b[i] = letterRunes[rand.Intn(len(letterRunes))]
	}
	return string(b)
}

func CreateReadme(readme_file string, content string) {

	f, err := os.Create(readme_file)
	if err != nil {
		return
	}
	defer f.Close()

	f.WriteString(content)
}
